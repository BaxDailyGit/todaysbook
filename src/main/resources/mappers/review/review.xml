<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.todaysbook.repository.ReviewMapper">
    <select id="getReviews" resultType="com.example.todaysbook.domain.dto.Review">
        SELECT r.id as id, r.book_id as bookId, r.user_id as userId, u.nick_name as nickName,
               r.create_time as createTime, r.content as content, r.score as score,
               (SELECT COUNT(*) FROM `like` WHERE review_id = r.id) as likeCount,
               (SELECT COUNT(*) FROM dislike WHERE review_id = r.id) as dislikeCount,
               IF(EXISTS (SELECT 0 FROM `like` l WHERE l.review_id = r.id AND l.user_id = #{userId}), true, false) as isLiked,
               IF(EXISTS (SELECT 0 FROM dislike dl WHERE dl.review_id = r.id AND dl.user_id = #{userId}), true, false) as isDisliked
        FROM review r
        LEFT JOIN user u
        ON u.id = r.user_id
        WHERE r.book_id = #{bookId}
        ORDER BY createTime DESC;
    </select>

    <insert id="addLikeReview">
        INSERT INTO `like` (user_id, review_id)
        VALUES (#{userId}, #{reviewId})
    </insert>

    <insert id="addDislikeReview">
        INSERT INTO dislike (user_id, review_id)
        VALUES (#{userId}, #{reviewId})
    </insert>

    <delete id="deleteLikeReview">
        DELETE
        FROM `like`
        WHERE user_id = #{userId} AND review_id = #{reviewId}
    </delete>

    <delete id="deleteDislikeReview">
        DELETE
        FROM dislike
        WHERE user_id = #{userId} AND review_id = #{reviewId}
    </delete>

    <select id="countLike" resultType="int">
        SELECT count(*)
        FROM `like`
        WHERE review_id = #{reviewId}
    </select>

    <select id="countDislike" resultType="int">
        SELECT count(*)
        FROM dislike
        WHERE review_id = #{reviewId}
    </select>

    <insert id="addReview" parameterType="com.example.todaysbook.domain.dto.ReviewRequestDto">
        INSERT INTO review (book_id, user_id, score, content, create_time)
        VALUES (#{bookId}, #{userId}, #{score}, #{content}, now())
    </insert>

    <delete id="deleteReview">
        DELETE
        FROM review
        WHERE id = #{reviewId}
    </delete>

    <update id="updateReview" parameterType="com.example.todaysbook.domain.dto.ReviewRequestDto">
        UPDATE review
        SET
            score = #{score},
            content = #{content},
            create_time = now()
        WHERE id = #{reviewId}
    </update>

</mapper>